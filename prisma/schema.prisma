generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  userId      String   @id @default(uuid())
  name        String
  email       String   @unique
  phoneNumber String? //
  role        Role     @default(EMPLOYEE)
  password    String // hashed
  verified    Boolean  @default(false)
  createdAt   DateTime @default(now())

  dlrs        DLR[]
  timeEntries TimeEntryGroup[]
}

enum Role {
  ADMIN
  EMPLOYEE
}

model DLR {
  dlrId         String    @id @default(uuid())
  dlrNumber     String    @unique
  jobNumber     String
  date          DateTime
  userId        String
  customer      String
  notes         String?
  status        DLRStatus @default(PENDING)
  totalHours    Float
  fuel          Float?
  hotel         Float?
  mileage       Float?
  otherExpenses String?
  fileUrl       String? // Link to PDF file
  signedUrl     String? // Signed copy from customer (uploaded manually)
  createdAt     DateTime  @default(now())

  user      Users          @relation(fields: [userId], references: [userId])
  invoice   Invoice?       @relation(fields: [invoiceId], references: [id])
  invoiceId String?
  po        PurchaseOrder? @relation(fields: [poId], references: [id])
  poId      String?
}

enum DLRStatus {
  PENDING
  APPROVED
  REJECTED
  REVIEW
}

model Invoice {
  id            String   @id @default(uuid())
  invoiceNumber String   @unique
  dlrs          DLR[]
  totalAmount   Float
  approved      Boolean  @default(false)
  createdAt     DateTime @default(now())
}

model PurchaseOrder {
  id          String   @id @default(uuid())
  poNumber    String   @unique
  dlrs        DLR[]
  vendorName  String
  totalAmount Float
  approved    Boolean  @default(false)
  createdAt   DateTime @default(now())
}

model TimeEntryGroup {
  id             String      @id @default(uuid())
  userId         String
  date           DateTime
  weekEndingDate DateTime
  status         EntryStatus @default(DRAFT)
  notes          String?

  jobs TimeEntryJob[]
  user Users          @relation(fields: [userId], references: [userId])
}

enum EntryStatus {
  DRAFT
  SUBMITTED
}

model TimeEntryJob {
  id            String  @id @default(uuid())
  groupId       String
  jobNumber     String
  hoursWorked   Float
  comments      String?
  mileage       Float?
  extraExpenses String?

  group TimeEntryGroup @relation(fields: [groupId], references: [id])
}

model Products {
  productId     String      @id
  name          String
  mfr           String?
  sku           String?
  price         Float
  rating        Float?
  stockQuantity Int
  Sales         Sales[]
  Purchases     Purchases[]
}

model Sales {
  saleId      String   @id @default(uuid())
  productId   String
  date        DateTime
  quantity    Int
  unitPrice   Float
  totalAmount Float
  product     Products @relation(fields: [productId], references: [productId])
}

model Purchases {
  purchaseId String   @id @default(uuid())
  productId  String
  date       DateTime
  quantity   Int
  unitCost   Float
  totalCost  Float
  product    Products @relation(fields: [productId], references: [productId])
}

model Expenses {
  expenseId String   @id @default(uuid())
  category  String
  amount    Float
  date      DateTime
}

model SalesSummary {
  salesSummaryId   String   @id @default(uuid())
  totalValue       Float
  changePercentage Float?
  date             DateTime
}

model PurchaseSummary {
  purchaseSummaryId String   @id @default(uuid())
  totalPurchased    Float
  changePercentage  Float?
  date              DateTime
}

model ExpenseSummary {
  expenseSummaryId  String              @id @default(uuid())
  totalExpenses     Float
  date              DateTime
  ExpenseByCategory ExpenseByCategory[]
}

model ExpenseByCategory {
  expenseByCategoryId String         @id @default(uuid())
  expenseSummaryId    String
  category            String
  amount              BigInt
  date                DateTime
  expenseSummary      ExpenseSummary @relation(fields: [expenseSummaryId], references: [expenseSummaryId])
}
